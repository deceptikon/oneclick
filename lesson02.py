# Урок 02
# #######

# Повтор концепций переменной и операторов
# Переменные и операторы это основные кирпичики программы, в переменных мы держим данные, с помощью операторов мы этими данными
# оперируем - назначаем значения, сравниваем, делаем математические операции и еще многое другое.
# Первый оператор с которым вы уже познакомились - это оператор присвоения =
num = 777  # то есть тут мы в переменную num с помощью оператора = записали значение 777
other_num = num  # а здесь все тем же оператором = мы записываем значение переменной num в other_num
print(other_num)  # выведет 777

# Хорошим примером присвоения (записи в переменную) является следующая задача:

# задать две числовых переменных
# поменять их значения местами
# А - используя третью переменную
# Б - не используя

#
a = 5
b = 7
print("a: ", a, "b: ", b)  # напишет a: 5, b = 7
# Вариант А
c = a  # в третью переменную с запишем значение а
a = b  # в переменную а запишем значение переменной b
b = c  # в переменную b запишем значение переменной с
print("a: ", a, "b: ", b)  # Вар. А -  напишет a: 7, b = 5
# Вариант Б, a теперь 7, b теперь 5
a = a + b  # в переменную а пишем сумму а и b (a = 7 + 5 = 13)
b = a - b  # в переменную b пишем разность нового значения а и b (b = 13 - 5 = 7)
a = a - b  # в переменную а пишем разность а и нового значения b (a = 13 - 7 = 5)
print("a: ", a, "b: ", b)  # Вар. Б - напишет a: 5, b = 7

# также в питоне можно присваивать переменные следующим образом:
# вместо того, чтоб объявлять каждую переменную на отдельной строке
x = 2
y = 3
z = 4
# мы можем просто написать
x, y, z = 2, 3, 4
# из этого вытекает, что мы можем очень легко менять значения переменных в python следующим образом:
a = 9
b = 4
print("a: ", a, "b: ", b)  # напишет a: 9, b = 4
a, b = b, a  # переприсвоили значения переменных друг на друга
print("a: ", a, "b: ", b)  # напишет a: 4, b = 9



# Булевый тип переменной
# Кроме числовых, дробных и строчных типов переменных, в python есть тип boolean, который может иметь
# только два значения - True или False, то есть - Истина или Ложь, Да или Нет.
winter_is_coming = True
python_is_difficult = False
truth_is_out_there = True

# В булевых переменных удобно хранить состояние выключателей в программе. К примеру:
print_user_email = False
# И где то дальше по коду мы проверяем значение этой переменной, чтобы понять,
# напечатать ли нам почту пользователя или нет

# Арифметические операторы и операции с числовыми переменными
# Для простых математических операций над числами используются следующие операторы:
m, n = 5, 2
# +  оператор сложения
print(m + n)  # выведет 7
# -  оператор вычитания
print(m - n)  # выведет 3
# *  оператор умножения
print(m * n)  # выведет 10
# /  оператор деления
print(m / n)  # выведет 2.5
# %  оператор получения остатка при делении
print(m % n)  # выведет 1
# ** оператор взятия в степень
print(m ** n)  # выведет 25
# // оператор целочисленного деления
print(m // n)  # выведет 2

# Операторы сравнения используются собстсвенно для сравнения значений,
# равны ли они или нет, больше или меньше и возвращают True если сравнение верно и False если нет
x, y = 100, 200
# == проверяет равны ли значения
print(x == y)  # False
# != или <> проверяет, неравны ли значения
print(x != y)  # True
# > проверяет, больше ли первое значение чем второе
print(x > y)  # False
# < проверяет, меньше ли первое значение чем второе
print(x < y)  # True
# >= проверяет, меньше ли первое значение чем второе
print(x >= y)  # False
# <= проверяет, меньше ли первое значение чем второе
print(x <= y)  # True

# Условные конструкции
# Если требуется выполнить один кусок кода при одном условии, а другой при другом,
# в python-e используются условные конструкции
if winter_is_coming:  # если условие между if и : верно,
    # то выполняется весь код в блоке с обязательным отступом
    print("Одевайтесь потеплее")
else:  # Иначе, если условие вверху не оказалось верным,
    # то выполняется код с отступом под else
    print("Этот текст не будет напечатан, пока зима близко")

age = 70

# если число в переменной age меньше 18,
if age < 18:
    # то сработает этот блок
    # и в этом блоке может быть вложенные условия
    if age < 7:  # если age меньше 7
        print("Детсад")  # выполнится это
    else:  # иначе
        print("Несовершеннолетний")  # это
# если число age меньше 60
elif age < 60:
    # то сработает этот блок
    print("Совершеннолетний")
# если не сработали ни одно из выше перечисленных
else:
    # то выполнится этот блок
    print("Пенсионер")

# Также есть короткая форма записи условия
sun_is_shining = True
# переменной day_or_night дать значение День если переменная sun_is_shining верна, иначе дать значение Ночь
day_or_night = 'День' if sun_is_shining else 'Ночь'
print(day_or_night)  # День

# Логические операторы
# используются при написании условий, для соединения нескольких проверок
a = 10

# and - логическое И
# если оба условия слева и справа верны, то целое условие будет верно, иначе неверно

# если а больше пяти И если а меньше двадцати
if a > 5 and a < 20: # должны быть верны оба условия
    print("а больше 5 и меньше 20")

# or - логическое ИЛИ
# если оба или хотя бы одно условие верны, то целое условие верно, иначе неверно

# если а больше 20000 ИЛИ меньше 20
if a > 20000 or a < 20: # хотя бы одно условие должно быть верным
    print("А или меньше 20 или больше 20000")

# not - логическое НЕ
# инвертирует условие, верно делает неверно и наоборот, как и НЕ в нашем разговоре

# если а НЕ равно 777
if not a == 777:
    print("а не 777, поэтому это распечатается")



# Операции со строками
# перечислим основные операции со строками
stroka = "Python is nice"
# функция len() возвращает длину строки
print(len(stroka))  # напишет 14
# метод index возвращает первое вхождение символа i
print(stroka.index('i')) # 7
# метод count считает количество символов n в строке
print(stroka.count('n')) # 2
# метод upper делает все буквы в строке большими
print(stroka.upper()) # PYTHON IS NICE
# метод lower делает все буквы в строке маленькими
print(stroka.lower())  # python is nice
# метод startswith возвращает истину, если строка начинается c Python
print(stroka.startswith("Python"))  # True
# метод endswith возвращает истину, если строка кончается на flies
print(stroka.endswith("flies"))  # False



# Слайсы - отрезки строк
# отрезки задаются по схеме s[начало:конец:шаг]

s = 'Pythonist'
# Можно считать как сначала, задавая положительные значения, так и с конца, используя отрицательные

# ниже порядок букв, так как они нумеруются в слайсах

# | P | y | t | h | o | n | i | s | t |
# | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |
# |-8 |-7 |-6 |-5 |-4 |-3 |-2 |-1 |   |

# возвращает буквы в строке начиная с 0 включительно по 6 исключительно
print(s[0:6])  # Python
# возвращает буквы в строке начиная с 0 включительно по 6 исключительно двигаясь по две буквы за шаг
print(s[0:6:2])  # Pto
# возвращает буквы в строке начиная с -4 исключительно по -1 включительно
print(s[-4:-1])  # nist
# указав отрицательный шаг, можно перевернуть строку
print(s[::-1])  # tsinohtyP


# Практические задания

# Написать программу, которая по введеному номеру месяца вычисляет, зима ли сейчас, лето или осень
# Вариант чуть сложнее - написать программу, которая по введеному номеру месяца и дню рождения выводит знак зодиака

# измените значения переменных ниже, чтобы все условия выполнились и распечатались числа от 1 до 6
number = 10
second_number = 10
first_array = []
second_array = [1,2,3]
# Все, дальше не меняйте

if number > 15:
    print("1")

if first_array:
    print("2")

if len(second_array) == 2:
    print("3")

if len(first_array) + len(second_array) == 5:
    print("4")

if first_array and first_array[0] == 1:
    print("5")

if not second_number:
    print("6")